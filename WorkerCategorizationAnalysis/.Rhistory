dim(dataf)[1]
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
dim(dataf)[1]
datafProfDeveloper = dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
datafHobbyist = dataf[(dataf$Worker.Experience=="Hobbyist") ,]
datafGraduate_Student = dataf[(dataf$Worker.Experience=="Graduate_Student") ,]
datafUndergraduate_Student = dataf[(dataf$Worker.Experience=="Undergraduate_Student") ,]
datafOther = dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Remove outliers
dataf <- dataf [!dataf$Years.Programming >40,]
dataf <- dataf [!dataf$Worker.Age >80,]
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper = dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
datafHobbyist = dataf[(dataf$Worker.Experience=="Hobbyist") ,]
datafGraduate_Student = dataf[(dataf$Worker.Experience=="Graduate_Student") ,]
datafUndergraduate_Student = dataf[(dataf$Worker.Experience=="Undergraduate_Student") ,]
#Generate for Others
datafOther = dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
datafOther = dataf[(datafOther$Worker.Experience!="Hobbyist") ,]
datafOther = dataf[(datafOther$Worker.Experience!="Graduate_Student") ,]
datafOther = dataf[(datafOther$Worker.Experience!="Undergraduate_Student") ,]
numberWorkers = dim(datafProfDeveloper)[1] + dim(datafHobbyist)[1] + dim(datafGraduate_Student)[1]+ dim(datafUndergraduate_Student)[1] + dim(datafOther)[1]
dim(datafProfDeveloper)[1]
dim(datafHobbyist)[1]
dim(datafGraduate_Student)[1]
dim(datafUndergraduate_Student)[1]
dim(datafOther)[1]
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Remove outliers
dataf <- dataf [!dataf$Years.Programming >40,]
dataf <- dataf [!dataf$Worker.Age >80,]
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper = dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
datafHobbyist = dataf[(dataf$Worker.Experience=="Hobbyist") ,]
datafGraduate_Student = dataf[(dataf$Worker.Experience=="Graduate_Student") ,]
datafUndergraduate_Student = dataf[(dataf$Worker.Experience=="Undergraduate_Student") ,]
#Generate for Others
datafOther = dataf[(dataf$Worker.Experience!="Professional_Developer") ,]
datafOther = dataf[(datafOther$Worker.Experience!="Hobbyist") ,]
datafOther = dataf[(datafOther$Worker.Experience!="Graduate_Student") ,]
datafOther = dataf[(datafOther$Worker.Experience!="Undergraduate_Student") ,]
numberWorkers = dim(datafProfDeveloper)[1] + dim(datafHobbyist)[1] + dim(datafGraduate_Student)[1]+ dim(datafUndergraduate_Student)[1] + dim(datafOther)[1]
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Remove outliers
dataf <- dataf [!dataf$Years.Programming >40,]
dataf <- dataf [!dataf$Worker.Age >80,]
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper = dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
datafHobbyist = dataf[(dataf$Worker.Experience=="Hobbyist") ,]
datafGraduate_Student = dataf[(dataf$Worker.Experience=="Graduate_Student") ,]
datafUndergraduate_Student = dataf[(dataf$Worker.Experience=="Undergraduate_Student") ,]
datafOther = dataf[(dataf$Worker.Experience!="Professional_Developer") ,]
dim(datafOther)[1]
datafOther = dataf[(datafOther$Worker.Experience!="Hobbyist") ,]
dim(datafOther)[1]
datafOther = dataf[(datafOther$Worker.Experience!="Graduate_Student") ,]
dim(datafOther)[1]
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Remove outliers
dataf <- dataf [!dataf$Years.Programming >40,]
dataf <- dataf [!dataf$Worker.Age >80,]
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
datafHobbyist <- dataf[(dataf$Worker.Experience=="Hobbyist") ,]
datafGraduate_Student <- dataf[(dataf$Worker.Experience=="Graduate_Student") ,]
datafUndergraduate_Student <- dataf[(dataf$Worker.Experience=="Undergraduate_Student") ,]
datafOther <- dataf[(dataf$Worker.Experience!="Professional_Developer") ,]
dim(datafOther)[1]
datafOther <- dataf[(datafOther$Worker.Experience!="Hobbyist") ,]
dim(datafOther)[1]
datafOther <- dataf[(datafOther$Worker.Experience!="Graduate_Student") ,]
dim(datafOther)[1]
dim(datafGraduate_Student)[1]
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Remove outliers
dataf <- dataf [!dataf$Years.Programming >40,]
dataf <- dataf [!dataf$Worker.Age >80,]
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
datafHobbyist <- dataf[(dataf$Worker.Experience=="Hobbyist") ,]
datafGraduate_Student <- dataf[(dataf$Worker.Experience=="Graduate_Student") ,]
datafUndergraduate_Student <- dataf[(dataf$Worker.Experience=="Undergraduate_Student") ,]
#Generate for Others
datafOther <- dataf[(dataf$Worker.Experience!="Professional_Developer") ,]
datafOther <- datafOther[(datafOther$Worker.Experience!="Hobbyist") ,]
datafOther <- datafOther[(datafOther$Worker.Experience!="Graduate_Student") ,]
datafOther <- datafOther[(datafOther$Worker.Experience!="Undergraduate_Student") ,]
numberWorkers = dim(datafProfDeveloper)[1] + dim(datafHobbyist)[1] + dim(datafGraduate_Student)[1]+ dim(datafUndergraduate_Student)[1] + dim(datafOther)[1]
plot(datafProfDeveloper$Worker.Age,datafProfDeveloper$Years.Programming)
title("Professional Developers YoE x Age")
plot(datafHobbyist$Worker.Age,datafHobbyist$Years.Programming)
title("Hobbyist YoE x Age")
plot(datafGraduate_Student$Worker.Age,datafGraduate_Student$Years.Programming)
title("Graduate Student YoE x Age")
plot(datafUndergraduate_Student$Worker.Age,datafUndergraduate_Student$Years.Programming)
title("Undergraduate Student YoE x Age")
plot(datafOther$Worker.Age,datafOther$Years.Programming)
title("Other Student YoE x Age")
plot(datafOther$Worker.Age,datafOther$Years.Programming)
title("Other YoE x Age")
plot(datafProfDeveloper$Worker.Age,datafProfDeveloper$Years.Programming)
title("Professional Developers YoE x Age")
plot(datafHobbyist$Worker.Age,datafHobbyist$Years.Programming)
title("Hobbyist YoE x Age")
plot(datafGraduate_Student$Worker.Age,datafGraduate_Student$Years.Programming)
title("Graduate Student YoE x Age")
plot(datafUndergraduate_Student$Worker.Age,datafUndergraduate_Student$Years.Programming)
title("Undergraduate Student YoE x Age")
plot(datafOther$Worker.Age,datafOther$Years.Programming)
title("Other YoE x Age")
plot(datafProfDeveloper$Worker.Age,datafProfDeveloper$Years.Programming)
title("Professional Developers YoE x Age")
plot(datafHobbyist$Worker.Age,datafHobbyist$Years.Programming)
title("Hobbyist YoE x Age")
plot(datafGraduate_Student$Worker.Age,datafGraduate_Student$Years.Programming)
title("Graduate Student YoE x Age")
plot(datafUndergraduate_Student$Worker.Age,datafUndergraduate_Student$Years.Programming)
title("Undergraduate Student YoE x Age")
plot(datafOther$Worker.Age,datafOther$Years.Programming)
title("Other YoE x Age")
boxplot(datafProfDeveloper$Worker.Age)
summary(datafProfDeveloper$Worker.Age)
std(datafProfDeveloper$Worker.Age)
stdev(datafProfDeveloper$Worker.Age)
?standard deviation
?sd
sd(datafProfDeveloper$Worker.Age)
avg_age = avg(datafProfDeveloper$Worker.Age)
?ave
mean_age = mean(datafProfDeveloper$Worker.Age)
mean(datafProfDeveloper$Worker.Age)
mean_age = mean(datafProfDeveloper$Worker.Age)
cut = 4 * sd_age+mean_age
sd_age = sd(datafProfDeveloper$Worker.Age)
mean_age = mean(datafProfDeveloper$Worker.Age)
cut = 4 * sd_age+mean_age
cut
cut = 4 * sd(datafProfDeveloper$Worker.Age) + mean(datafProfDeveloper$Worker.Age)
datafProfDeveloper<-removeLinesAboveValue(datafProfDeveloper,7,cut)
#Remove all lines from the dataframe for which a
#provided column has content larger the provided the value
removeLinesAboveValue <- function (dataframe, columNumber, value){
lines <- which(dataframe[columNumber,]>value)
dataframe[-lines,]
}
cut = 4 * sd(datafProfDeveloper$Worker.Age) + mean(datafProfDeveloper$Worker.Age)
datafProfDeveloper<-removeLinesAboveValue(datafProfDeveloper,7,cut)
#Test data
column1<- c("prof","hobby")
column2<- c(15,10)
column3<- c(25,31)
df<- data.frame(column1,column2,column3)
names<-c("worker.profession","worker.yoe","age")
colnames (df) <- names
df$worker.yoe <- lapply(df$worker.yoe,function(x){as.numeric(as.character(x))})
df$age <- lapply(df$age,function(x){as.numeric(as.character(x))})
lines <- which(dataframe[2,]>=0)
lines <- which(df[2,]>=0)
lines <- which(df[,2]>=0)
lines <- which(df[,3]>=0)
lines
cut = 4 * sd(datafProfDeveloper$Worker.Age) + mean(datafProfDeveloper$Worker.Age)
datafProfDeveloper<-removeLinesAboveValue(datafProfDeveloper,7,cut)
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
cut = 4 * sd(datafProfDeveloper$Worker.Age) + mean(datafProfDeveloper$Worker.Age)
datafProfDeveloper<-removeLinesAboveValue(datafProfDeveloper,7,cut)
datafProfDeveloper[1,7]
datafProfDeveloper[,7]
datafProfDeveloper
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
boxplot(datafProfDeveloper$Worker.Age)
datafProfDeveloper
datafProfDeveloper<-removeLinesAboveValue(datafProfDeveloper,7,cut)
datafProfDeveloper
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
which(dataframe[,7]>=0)
which(dataf[,7]>=0)
removeLinesAboveValue(datafProfDeveloper,7,cut)
datafProfDeveloper
dim(datafProfDeveloper)[1]
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
dim(datafProfDeveloper)[1]
removeLinesAboveValue(datafProfDeveloper,7,cut)
dim(datafProfDeveloper)[1]
removeLinesAboveValue(datafProfDeveloper,7,cut)
cut
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
cut = 4 * sd(datafProfDeveloper$Worker.Age) + mean(datafProfDeveloper$Worker.Age)
removeLinesAboveValue(datafProfDeveloper,7,cut)
dim(datafProfDeveloper)[1]
datafProfDeveloper
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
cut = 4 * sd(datafProfDeveloper$Worker.Age) + mean(datafProfDeveloper$Worker.Age)
removeLinesAboveValue(datafProfDeveloper,7,cut)
("Professional Developers YoE x Age")
dim(datafProfDeveloper)[1]
removeLinesAboveValue(datafProfDeveloper,7,cut)
which(datafProfDeveloper,7,61)
which(datafProfDeveloper[,7]>61)
which(datafProfDeveloper[,7]>1)
which(datafProfDeveloper[,7]>50)
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
cut = 3 * sd(datafProfDeveloper$Worker.Age) + mean(datafProfDeveloper$Worker.Age)
removeLinesAboveValue(datafProfDeveloper,7,cut)
dim(datafProfDeveloper)[1]
which(datafProfDeveloper[,7]>cut)
removeLinesAboveValue <- function (dataframe, columNumber, value){
lines <- which(dataframe[,columNumber]>value)
dataframe[-lines,]
}
removeLinesAboveValue <- function (dataframe, columNumber, value){
lines <- which(dataframe[,columNumber]>value)
dataframe[-lines,]
}
cut = 3 * sd(datafProfDeveloper$Worker.Age) + mean(datafProfDeveloper$Worker.Age)
removeLinesAboveValue(datafProfDeveloper,7,cut)
dim(datafProfDeveloper)[1]
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
#Select data from each profession
#Prof.developer
"Profession"="Profession_Developer"
#Generate separate datasets for each profession
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
datafProfDeveloper
dim(datafProfDeveloper)[1]
which(datafProfDeveloper[,7]>cut)
cut = 3 * sd(datafProfDeveloper$Worker.Age) + mean(datafProfDeveloper$Worker.Age)
removeLinesAboveValue(datafProfDeveloper,7,cut)
dim(datafProfDeveloper)[1]
lines <- which(datafProfDeveloper[,7]>cut)
datafProfDeveloper[-lines,]
f <- datafProfDeveloper[-lines,]
dim(f)[1]
setwd("C://Users//chris//OneDrive//Documentos//GitHub//programmerDemographics//WorkerCategorizationAnalysis");
data_all <- read.csv("demographics_data.csv",header = TRUE,sep=",");
dataf = data.frame(data_all)
#summary(dataf)
#First I need to look at the outliers or invalid values
#Invalid age and invalid years of experience
#Remove rows with not available data
dataf <- dataf [(is.na(dataf$Worker.Age))==0,]
#Remove invalid values
dataf <- dataf [!dataf$Worker.Age <1,]
dataf <- dataf [!dataf$Worker.Age <1,]
#Assuming that the youngest age to start programming is 10 years old
#Remove inputs for which age-YoE<5
dataf <- removeLinesColDiffSmallerThanValue(dataf,7,5,10)
datafProfDeveloper <- dataf[(dataf$Worker.Experience=="Professional_Developer") ,]
cut = 3 * sd(datafProfDeveloper$Worker.Age) + mean(datafProfDeveloper$Worker.Age)
removeLinesAboveValue(datafProfDeveloper,7,cut)
dim(datafProfDeveloper)[1]
removeLinesAboveValue(datafProfDeveloper,7,cut)
datafProfDeveloper<- removeLinesAboveValue(datafProfDeveloper,7,cut)
dim(datafProfDeveloper)[1]
cut = 3 * sd(datafProfDeveloper$Years.Programming) + mean(datafProfDeveloper$Years.Programming)
datafProfDeveloper<- removeLinesAboveValue(datafProfDeveloper,5,cut)
dim(datafProfDeveloper)[1]
datafHobbyist
dim(datafHobbyist)[1]
cut = 3 * sd(datafHobbyist$Worker.Age) + mean(datafHobbyist$Worker.Age)
datafHobbyist<- removeLinesAboveValue(datafHobbyist,7,cut)
dim(datafHobbyist)[1]
cut = 3 * sd(datafHobbyist$Years.Programming) + mean(datafHobbyist$Years.Programming)
datafHobbyist<- removeLinesAboveValue(datafHobbyist,5,cut)
dim(datafHobbyist)[1]
cut = 3 * sd(datafGraduate_Student$Worker.Age) + mean(datafGraduate_Student$Worker.Age)
datafGraduate_Student<- removeLinesAboveValue(datafGraduate_Student,7,cut)
dim(datafGraduate_Student)[1]
cut = 3 * sd(datafGraduate_Student$Years.Programming) + mean(datafGraduate_Student$Years.Programming)
datafGraduate_Student<- removeLinesAboveValue(datafGraduate_Student,5,cut)
dim(datafGraduate_Student)[1]
cut = 3 * sd(datafUndergraduate_Student$Worker.Age) + mean(datafUndergraduate_Student$Worker.Age)
datafUndergraduate_Student<- removeLinesAboveValue(datafUndergraduate_Student,7,cut)
dim(datafUndergraduate_Student)[1]
cut = 3 * sd(datafUndergraduate_Student$Years.Programming) + mean(datafUndergraduate_Student$Years.Programming)
datafUndergraduate_Student<- removeLinesAboveValue(datafUndergraduate_Student,5,cut)
dim(datafUndergraduate_Student)[1]
cut = 3 * sd(datafOther$Worker.Age) + mean(datafOther$Worker.Age)
datafOther<- removeLinesAboveValue(datafOther,7,cut)
dim(datafOther)[1]
cut = 3 * sd(datafOther$Years.Programming) + mean(datafOther$Years.Programming)
datafOther<- removeLinesAboveValue(datafOther,5,cut)
dim(datafOther)[1]
plot(datafProfDeveloper$Worker.Age,datafProfDeveloper$Years.Programming)
title("Professional Developers YoE x Age")
plot(datafHobbyist$Worker.Age,datafHobbyist$Years.Programming)
title("Hobbyist YoE x Age")
plot(datafGraduate_Student$Worker.Age,datafGraduate_Student$Years.Programming)
title("Graduate Student YoE x Age")
plot(datafUndergraduate_Student$Worker.Age,datafUndergraduate_Student$Years.Programming)
title("Undergraduate Student YoE x Age")
plot(datafOther$Worker.Age,datafOther$Years.Programming)
title("Other YoE x Age")
